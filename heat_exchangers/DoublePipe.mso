#*-------------------------------------------------------------------
* EMSO Model Library (EML) Copyright (C) 2004 - 2007 ALSOC.
*
* This LIBRARY is free software; you can distribute it and/or modify
* it under the therms of the ALSOC FREE LICENSE as available at
* http://www.enq.ufrgs.br/alsoc.
*
* EMSO Copyright (C) 2004 - 2007 ALSOC, original code
* from http://www.rps.eng.br Copyright (C) 2002-2004.
* All rights reserved.
*
* EMSO is distributed under the therms of the ALSOC LICENSE as
* available at http://www.enq.ufrgs.br/alsoc.
*--------------------------------------------------------------------
* Author: Gerson Balbueno Bicca 
* $Id$
*------------------------------------------------------------------*#

using "HEX_Engine";

Model DoublePipe_Geometry

ATTRIBUTES
	Pallete 	= false;
	Brief 		= "double pipe geometrical parameters.";

PARAMETERS

outer PP 	    	as Plugin		(Brief="External Physical Properties", Type="PP");
outer NComp   	as Integer   	(Brief="Number of Components",Hidden=true);

	M(NComp)  	as molweight 	(Brief="Component Mol Weight",Hidden=true);

	Pi					as constant 		(Brief="Pi Number",Default=3.14159265, Symbol = "\pi",Hidden=true);
	DoInner 		as length			(Brief="Outside Diameter of Inner Pipe",Lower=1e-6);
	DiInner		as length			(Brief="Inside Diameter of Inner Pipe",Lower=1e-10);
	DiOuter		as length			(Brief="Inside Diameter of Outer pipe",Lower=1e-10);
	Lpipe			as length			(Brief="Effective Tube Length of one segment of Pipe",Lower=0.1, Symbol = "L_{pipe}");
	Kwall			as conductivity 	(Brief="Tube Wall Material Thermal Conductivity",Default=1.0, Symbol = "K_{wall}");
	Rfi				as positive			(Brief="Inside Fouling Resistance",Unit='m^2*K/kW',Default=1e-6,Lower=0);
	Rfo				as positive			(Brief="Outside Fouling Resistance",Unit='m^2*K/kW',Default=1e-6,Lower=0);

SET

#"Component Molecular Weight"
	M  = PP.MolecularWeight();

#"Pi Number"
	Pi = 3.14159265;

end

Model DoublePipe_Basic

ATTRIBUTES
	Pallete 	= false;
	Brief 		= "Basic Equations for rigorous double pipe heat exchanger model.";
	Info 		=
	"Thermal analysis of double pipe heat exchanger using the NTU or LMTD Method.

== References ==

[1] E.A.D. Saunders, Heat Exchangers: Selection, Design and
 Construction, Longman, Harlow, 1988.

[2] Serth, Robert W., Process Heat Transfer: Principles and Applications, Elsevier, 2007. 

[3] Gnielinski, V., Forced convection in ducts, in Heat Exchanger Design Handbook, Vol. 2
 Hemisphere Publishing Corp., New York, 1988.";

PARAMETERS

outer PP 	    	as Plugin		(Brief="External Physical Properties", Type="PP");
outer NComp   	as Integer   	(Brief="Number of Components",Hidden=true);
	
	M(NComp)  	as molweight 	(Brief="Component Mol Weight",Hidden=true);
	
	HotSide			 			as Switcher	(Brief="Flag for Fluid Alocation ",Valid=["outer","inner"],Default="outer",Hidden=true);
	innerFlowRegime 	as Switcher	(Brief="Inner Flow Regime ",Valid=["laminar","transition","turbulent"],Default="laminar",Hidden=true);
	outerFlowRegime 	as Switcher	(Brief="Outer Flow Regime ",Valid=["laminar","transition","turbulent"],Default="laminar",Hidden=true);

	InnerLaminarCorrelation  	as Switcher	(Brief="Heat Transfer Correlation in Laminar Flow for the Inner Side",Valid=["Hausen","Schlunder"],Default="Hausen");
	InnerTransitionCorrelation  as Switcher		(Brief="Heat Transfer Correlation in Transition Flow for the Inner Side",Valid=["Gnielinski","Hausen"],Default="Gnielinski");
	InnerTurbulentCorrelation   as Switcher	(Brief="Heat Transfer Correlation in Turbulent Flow for the Inner Side",Valid=["Petukhov","SiederTate"],Default="Petukhov");

	OuterLaminarCorrelation  	as Switcher		(Brief="Heat Transfer Correlation in Laminar Flow for the Outer Side",Valid=["Hausen","Schlunder"],Default="Hausen");
	OuterTransitionCorrelation  as Switcher		(Brief="Heat Transfer Correlation in Transition Flow for the OuterSide",Valid=["Gnielinski","Hausen"],Default="Gnielinski");
	OuterTurbulentCorrelation   as Switcher		(Brief="Heat Transfer Correlation in Turbulent Flow for the Outer Side",Valid=["Petukhov","SiederTate"],Default="Petukhov");

	CalculationApproach			as Switcher	(Brief="Options for convergence Calculations ",Valid=["Simplified","Full"],Default="Full");
	Qestimated							as power		(Brief="Estimated Duty", Default=70, Lower=1e-6, Upper=1e10);

VARIABLES

	Geometry 			as DoublePipe_Geometry 	(Brief="Double pipe geometry",Symbol=" ");	
in  InletInner	   		as stream 								(Brief="Inlet Inner Stream", PosX=0, PosY=0.5225, Symbol="_{inInner}");	
in  InletOuter	   		as stream 								(Brief="Inlet Outer Stream", PosX=0.2805, PosY=0, Symbol="_{inOuter}");
out OutletInner    	as streamPH 						(Brief="Outlet Inner Stream", PosX=1, PosY=0.5225, Symbol="_{outInner}");
out OutletOuter    	as streamPH 						(Brief="Outlet Outer Stream", PosX=0.7264, PosY=1, Symbol="_{outOuter}");

	Details     	as Details_Main				(Brief="Some Details in the Heat Exchanger", Symbol=" ");
	Inner 			as Main_DoublePipe		(Brief="Inner Side of the Heat Exchanger", Symbol="_{Inner}");
	Outer 			as Main_DoublePipe		(Brief="Outer Side of the Heat Exchanger", Symbol="_{Outer}");

SET

#"Inner Pipe Cross Sectional Area for Flow"
	Inner.HeatTransfer.As = 0.25*Geometry.Pi*Geometry.DiInner*Geometry.DiInner;
	
#"Outer Pipe Cross Sectional Area for Flow"
	Outer.HeatTransfer.As  = 0.25*Geometry.Pi*(Geometry.DiOuter*Geometry.DiOuter - Geometry.DoInner*Geometry.DoInner);
	
#"Inner Pipe Hydraulic Diameter for Heat Transfer"
	Inner.HeatTransfer.Dh = Geometry.DiInner;
	
#"Outer Pipe Hydraulic Diameter for Heat Transfer"
	Outer.HeatTransfer.Dh = (Geometry.DiOuter*Geometry.DiOuter-Geometry.DoInner*Geometry.DoInner)/Geometry.DoInner;

#"Inner Pipe Hydraulic Diameter for Pressure Drop"
	Inner.PressureDrop.Dh = Geometry.DiInner;
	
#"Outer Pipe Hydraulic Diameter for Pressure Drop"
	Outer.PressureDrop.Dh=Geometry.DiOuter-Geometry.DoInner;

EQUATIONS

"Outer	Stream Average Temperature"
	Outer.Properties.Average.T = 0.5*InletOuter.T + 0.5*OutletOuter.T;

"Inner Stream Average Temperature"
	Inner.Properties.Average.T = 0.5*InletInner.T + 0.5*OutletInner.T;
	
"Outer Stream Average Pressure"
	Outer.Properties.Average.P = 0.5*InletOuter.P+0.5*OutletOuter.P;
	
"Inner Stream Average Pressure"
	Inner.Properties.Average.P = 0.5*InletInner.P+0.5*OutletInner.P;

"Inner Stream Wall Temperature"
	Inner.Properties.Wall.Twall =   0.5*Outer.Properties.Average.T + 0.5*Inner.Properties.Average.T;

"Outer Stream Wall Temperature"
	Outer.Properties.Wall.Twall =   0.5*Outer.Properties.Average.T + 0.5*Inner.Properties.Average.T;

"Outer Stream Average Molecular Weight"
	Outer.Properties.Average.Mw = sum(M*InletOuter.z);

"Inner Stream Average Molecular Weight"
	Inner.Properties.Average.Mw = sum(M*InletInner.z);

"Flow Mass Inlet Inner Stream"
	Inner.Properties.Inlet.Fw	=  sum(M*InletInner.z)*InletInner.F;

"Flow Mass Outlet Inner Stream"
	Inner.Properties.Outlet.Fw	=  sum(M*OutletInner.z)*OutletInner.F;

"Flow Mass Inlet Outer Stream"
	Outer.Properties.Inlet.Fw		=  sum(M*InletOuter.z)*InletOuter.F;

"Flow Mass Outlet Outer Stream"	
	Outer.Properties.Outlet.Fw	=  sum(M*OutletOuter.z)*OutletOuter.F;

"Molar Balance Outer Stream"
	OutletOuter.F = InletOuter.F;
	
"Molar Balance Inner Stream"
	OutletInner.F = InletInner.F;

"Outer Stream Molar Fraction Constraint"
	OutletOuter.z=InletOuter.z;
	
"Inner Stream Molar Fraction Constraint"
	OutletInner.z=InletInner.z;

"Exchange Surface Area for one segment of pipe"
	Details.A=Geometry.Pi*Geometry.DoInner*Geometry.Lpipe;

if InletInner.v equal 0
	
	then	

"Average Heat Capacity Inner Stream"
	Inner.Properties.Average.Cp 		= 	PP.LiquidCp(Inner.Properties.Average.T,Inner.Properties.Average.P,InletInner.z);

"Average Mass Density Inner Stream"
	Inner.Properties.Average.rho 	= 	PP.LiquidDensity(Inner.Properties.Average.T,Inner.Properties.Average.P,InletInner.z);

"Inlet Mass Density Inner Stream"
	Inner.Properties.Inlet.rho 		= 	PP.LiquidDensity(InletInner.T,InletInner.P,InletInner.z);

"Outlet Mass Density Inner Stream"
	Inner.Properties.Outlet.rho 	= 	PP.LiquidDensity(OutletInner.T,OutletInner.P,OutletInner.z);

"Average Viscosity Inner Stream"
	Inner.Properties.Average.Mu 	= 	PP.LiquidViscosity(Inner.Properties.Average.T,Inner.Properties.Average.P,InletInner.z);

"Average	Conductivity Inner Stream"
	Inner.Properties.Average.K	 	= 	PP.LiquidThermalConductivity(Inner.Properties.Average.T,Inner.Properties.Average.P,InletInner.z);

"Viscosity Inner Stream at wall temperature"
	Inner.Properties.Wall.Mu 		= 	PP.LiquidViscosity(Inner.Properties.Wall.Twall,Inner.Properties.Average.P,InletInner.z);

	else

"Average Heat Capacity InnerStream"
	Inner.Properties.Average.Cp 	=	PP.VapourCp(Inner.Properties.Average.T,Inner.Properties.Average.P,InletInner.z);

"Average Mass Density Inner Stream"
	Inner.Properties.Average.rho 	=	PP.VapourDensity(Inner.Properties.Average.T,Inner.Properties.Average.P,InletInner.z);

"Inlet Mass Density Inner Stream"
	Inner.Properties.Inlet.rho 		=	PP.VapourDensity(InletInner.T,InletInner.P,InletInner.z);
	
"Outlet Mass Density Inner Stream"
	Inner.Properties.Outlet.rho 	=	PP.VapourDensity(OutletInner.T,OutletInner.P,OutletInner.z);

"Average Viscosity Inner Stream"
	Inner.Properties.Average.Mu 	=	PP.VapourViscosity(Inner.Properties.Average.T,Inner.Properties.Average.P,InletInner.z);

"Average Conductivity Inner Stream"
	Inner.Properties.Average.K 		= 	PP.VapourThermalConductivity(Inner.Properties.Average.T,Inner.Properties.Average.P,InletInner.z);

"Viscosity Inner Stream at wall temperature"
	Inner.Properties.Wall.Mu 		=	PP.VapourViscosity(Inner.Properties.Wall.Twall,Inner.Properties.Average.P,InletInner.z);

end

if InletOuter.v equal 0

	then

"Average Heat Capacity Outer Stream"
	Outer.Properties.Average.Cp 	=		PP.LiquidCp(Outer.Properties.Average.T,Outer.Properties.Average.P,InletOuter.z);

"Average Mass Density Outer Stream"
	Outer.Properties.Average.rho =		PP.LiquidDensity(Outer.Properties.Average.T,Outer.Properties.Average.P,InletOuter.z);

"Inlet Mass Density Outer Stream"
	Outer.Properties.Inlet.rho 		=		PP.LiquidDensity(InletOuter.T,InletOuter.P,InletOuter.z);

"Outlet Mass Density Outer Stream"
	Outer.Properties.Outlet.rho 	=		PP.LiquidDensity(OutletOuter.T,OutletOuter.P,OutletOuter.z);

"Average Viscosity Outer Stream"
	Outer.Properties.Average.Mu 	=		PP.LiquidViscosity(Outer.Properties.Average.T,Outer.Properties.Average.P,InletOuter.z);	

"Average Conductivity Outer Stream"
	Outer.Properties.Average.K 	=		PP.LiquidThermalConductivity(Outer.Properties.Average.T,Outer.Properties.Average.P,InletOuter.z);	

"Viscosity Outer Stream at wall temperature"
	Outer.Properties.Wall.Mu 		=		PP.LiquidViscosity(Outer.Properties.Wall.Twall,Outer.Properties.Average.P,InletOuter.z);	


	else

"Average Heat Capacity Outer Stream"
	Outer.Properties.Average.Cp 	=		PP.VapourCp(Outer.Properties.Average.T,Outer.Properties.Average.P,InletOuter.z);

"Average Mass Density Outer Stream"
	Outer.Properties.Average.rho =		PP.VapourDensity(Outer.Properties.Average.T,Outer.Properties.Average.P,InletOuter.z);

"Inlet Mass Density Outer Stream"
	Outer.Properties.Inlet.rho 		=		PP.VapourDensity(InletOuter.T,InletOuter.P,InletOuter.z);
	
"Outlet Mass Density Outer Stream"
	Outer.Properties.Outlet.rho 	=		PP.VapourDensity(OutletOuter.T,OutletOuter.P,OutletOuter.z);

"Average Viscosity Outer Stream"
	Outer.Properties.Average.Mu 	=		PP.VapourViscosity(Outer.Properties.Average.T,Outer.Properties.Average.P,InletOuter.z);

"Average Conductivity Outer Stream"
	Outer.Properties.Average.K 	=		PP.VapourThermalConductivity(Outer.Properties.Average.T,Outer.Properties.Average.P,InletOuter.z);	

"Viscosity Outer Stream at wall temperature"
	Outer.Properties.Wall.Mu 		=		PP.VapourViscosity(Outer.Properties.Wall.Twall,Outer.Properties.Average.P,InletOuter.z);

end

switch HotSide
	
	case "outer":

"Energy Balance Outer Stream"
	Details.Q = InletOuter.F*(InletOuter.h-OutletOuter.h);

"Energy Balance Inner Stream"
	Details.Q = InletInner.F*(OutletInner.h-InletInner.h);

	when InletInner.T > InletOuter.T switchto "inner";

case "inner":

"Energy Balance Hot Stream"
	Details.Q = InletInner.F*(InletInner.h-OutletInner.h);

"Energy Balance Cold Stream"
	Details.Q = InletOuter.F*(OutletOuter.h - InletOuter.h);

	when InletInner.T < InletOuter.T switchto "outer";

end

switch innerFlowRegime
	
	case "laminar":
	
"Inner Side Friction Factor for Pressure Drop - laminar Flow"
	Inner.PressureDrop.fi*Inner.PressureDrop.Re = 16;
	
	when Inner.PressureDrop.Re > 2300 switchto "transition";

	case "transition":
	
"using Turbulent Flow" 
	(Inner.PressureDrop.fi-0.0035)*(Inner.PressureDrop.Re^0.42) = 0.264;

	when Inner.PressureDrop.Re < 2300 switchto "laminar";
	when Inner.PressureDrop.Re > 10000 switchto "turbulent";

	case "turbulent":

"Inner Side Friction Factor"
	(Inner.PressureDrop.fi-0.0035)*(Inner.PressureDrop.Re^0.42) = 0.264;

	when Inner.PressureDrop.Re < 10000 switchto "transition";
	
end	

switch outerFlowRegime
	
	case "laminar":
	
"Outer Side Friction Factor - laminar Flow"
	Outer.PressureDrop.fi*Outer.PressureDrop.Re = 16;
	
	when Outer.PressureDrop.Re > 2300 switchto "transition";

	case "transition":
	
"using Turbulent Flow" 
	(Outer.PressureDrop.fi-0.0035)*(Outer.PressureDrop.Re^0.42) = 0.264;

	when Outer.PressureDrop.Re < 2300 switchto "laminar";
	when Outer.PressureDrop.Re > 10000 switchto "turbulent";

	case "turbulent":

"Outer Side Friction Factor"
	(Outer.PressureDrop.fi-0.0035)*(Outer.PressureDrop.Re^0.42) = 0.264;

	when Outer.PressureDrop.Re < 10000 switchto "transition";
	
end

switch innerFlowRegime
	
	case "laminar":
	
"Inner Side Friction Factor for Heat Transfer - laminar Flow"
	Inner.HeatTransfer.fi   = 1/(0.79*ln(Inner.HeatTransfer.Re)-1.64)^2;
	
switch InnerLaminarCorrelation
	
	case "Hausen":

"Nusselt Number"
	Inner.HeatTransfer.Nu = 3.665 + ((0.19*((Geometry.DiInner/Geometry.Lpipe)*Inner.HeatTransfer.Re*Inner.HeatTransfer.PR)^0.8)/(1+0.117*((Geometry.DiInner/Geometry.Lpipe)*Inner.HeatTransfer.Re*Inner.HeatTransfer.PR)^0.467));
	
	case "Schlunder":

"Nusselt Number"
	Inner.HeatTransfer.Nu = (49.027896+4.173281*Inner.HeatTransfer.Re*Inner.HeatTransfer.PR*(Geometry.DiInner/Geometry.Lpipe))^(1/3);

end
	
	when Inner.HeatTransfer.Re > 2300 switchto "transition";
	
	case "transition":
	
"Inner Side Friction Factor for Heat Transfer - transition Flow"
	Inner.HeatTransfer.fi   = 1/(0.79*ln(Inner.HeatTransfer.Re)-1.64)^2;
	
switch InnerTransitionCorrelation
	
	case "Gnielinski":
	
"Nusselt Number"
	Inner.HeatTransfer.Nu*(1+(12.7*sqrt(0.125*Inner.HeatTransfer.fi)*((Inner.HeatTransfer.PR)^(2/3) -1))) = 0.125*Inner.HeatTransfer.fi*(Inner.HeatTransfer.Re-1000)*Inner.HeatTransfer.PR;

	case "Hausen":

"Nusselt Number"
	Inner.HeatTransfer.Nu =0.116*(Inner.HeatTransfer.Re^(0.667)-125)*Inner.HeatTransfer.PR^(0.333)*(1+(Geometry.DiInner/Geometry.Lpipe)^0.667);
	
end

	when Inner.HeatTransfer.Re < 2300 switchto "laminar";
	when Inner.HeatTransfer.Re > 10000 switchto "turbulent";

	case "turbulent":

switch InnerTurbulentCorrelation
	
	case "Petukhov":
	
"Inner Side Friction Factor for Heat Transfer - turbulent Flow"
	Inner.HeatTransfer.fi   = 1/(1.82*log(Inner.HeatTransfer.Re)-1.64)^2;

"Nusselt Number"
	Inner.HeatTransfer.Nu*(1.07+(12.7*sqrt(0.125*Inner.HeatTransfer.fi)*((Inner.HeatTransfer.PR)^(2/3) -1))) = 0.125*Inner.HeatTransfer.fi*Inner.HeatTransfer.Re*Inner.HeatTransfer.PR;
	
	case "SiederTate":

"Nusselt Number"
	Inner.HeatTransfer.Nu = 0.027*(Inner.HeatTransfer.PR)^(1/3)*(Inner.HeatTransfer.Re)^(4/5);

"Inner Side Friction Factor for Heat Transfer - turbulent Flow"
	Inner.HeatTransfer.fi   = 1/(1.82*log(Inner.HeatTransfer.Re)-1.64)^2;
	
end
	
	when Inner.HeatTransfer.Re < 10000 switchto "transition";
	
end

switch outerFlowRegime
	
	case "laminar":
	
"Outer Side Friction Factor for Heat Transfer - laminar Flow"
	Outer.HeatTransfer.fi   = 1/(0.79*ln(Outer.HeatTransfer.Re)-1.64)^2;
	
switch OuterLaminarCorrelation
	
	case "Hausen":

"Nusselt Number"
	Outer.HeatTransfer.Nu = 3.665 + ((0.19*((Outer.HeatTransfer.Dh/Geometry.Lpipe)*Outer.HeatTransfer.Re*Outer.HeatTransfer.PR)^0.8)/(1+0.117*((Outer.HeatTransfer.Dh/Geometry.Lpipe)*Outer.HeatTransfer.Re*Outer.HeatTransfer.PR)^0.467));
	
	case "Schlunder":

"Nusselt Number"
	Outer.HeatTransfer.Nu = (49.027896+4.173281*Outer.HeatTransfer.Re*Outer.HeatTransfer.PR*(Outer.HeatTransfer.Dh/Geometry.Lpipe))^(1/3);

end
	
	when Outer.HeatTransfer.Re > 2300 switchto "transition";
	
	case "transition":
	
switch OuterTransitionCorrelation
	
	case "Gnielinski":

"Outer Side Friction Factor for Heat Transfer - transition Flow"
	Outer.HeatTransfer.fi   = 1/(0.79*ln(Outer.HeatTransfer.Re)-1.64)^2;

"Nusselt Number"
	Outer.HeatTransfer.Nu*(1+(12.7*sqrt(0.125*Outer.HeatTransfer.fi)*((Outer.HeatTransfer.PR)^(2/3) -1))) = 0.125*Outer.HeatTransfer.fi*(Outer.HeatTransfer.Re-1000)*Outer.HeatTransfer.PR;

	case "Hausen":

"Nusselt Number"
	Outer.HeatTransfer.Nu =	0.116*(Outer.HeatTransfer.Re^(0.667)-125)*Outer.HeatTransfer.PR^(0.333)*(1+(Outer.HeatTransfer.Dh/Geometry.Lpipe)^0.667);


"Outer Side Friction Factor for Heat Transfer - transition Flow"
	Outer.HeatTransfer.fi   = 1/(0.79*ln(Outer.HeatTransfer.Re)-1.64)^2;
	
end
	
	when Outer.HeatTransfer.Re < 2300 switchto "laminar";
	when Outer.HeatTransfer.Re > 10000 switchto "turbulent";
	
	case "turbulent":
	
switch OuterTurbulentCorrelation
	
	case "Petukhov":

"Outer Side Friction Factor for Heat Transfer - turbulent Flow"
	Outer.HeatTransfer.fi   = 1/(1.82*log(Outer.HeatTransfer.Re)-1.64)^2;
	
"Nusselt Number"
	Outer.HeatTransfer.Nu*(1.07+(12.7*sqrt(0.125*Outer.HeatTransfer.fi)*((Outer.HeatTransfer.PR)^(2/3) -1))) = 0.125*Outer.HeatTransfer.fi*Outer.HeatTransfer.Re*Outer.HeatTransfer.PR;
	
	case "SiederTate":

"Nusselt Number"
	Outer.HeatTransfer.Nu = 0.027*(Outer.HeatTransfer.PR)^(1/3)*(Outer.HeatTransfer.Re)^(4/5);

"Outer Side Friction Factor for Heat Transfer - turbulent Flow"
	Outer.HeatTransfer.fi   = 1/(1.82*log(Outer.HeatTransfer.Re)-1.64)^2;
	
end

	when Outer.HeatTransfer.Re < 10000 switchto "transition";

end

switch CalculationApproach
	
	case "Full":
	
"Total Pressure Drop Outer Stream"
	Outer.PressureDrop.Pdrop  = Outer.PressureDrop.Pd_fric;

"Total Pressure Drop Inner Stream"
	Inner.PressureDrop.Pdrop  = Inner.PressureDrop.Pd_fric;
	
"Pressure Drop Outer Stream"
	OutletOuter.P  = InletOuter.P - Outer.PressureDrop.Pdrop;

"Pressure Drop Inner Stream"
	OutletInner.P  = InletInner.P - Inner.PressureDrop.Pdrop;
	
"Outer Pipe Pressure Drop for friction"
	Outer.PressureDrop.Pd_fric = (2*Outer.PressureDrop.fi*Geometry.Lpipe*Outer.Properties.Average.rho*Outer.HeatTransfer.Vmean^2)/(Outer.PressureDrop.Dh*Outer.HeatTransfer.Phi);
	
"Inner Pipe Pressure Drop for friction"
	Inner.PressureDrop.Pd_fric = (2*Inner.PressureDrop.fi*Geometry.Lpipe*Inner.Properties.Average.rho*Inner.HeatTransfer.Vmean^2)/(Geometry.DiInner*Inner.HeatTransfer.Phi);

	case "Simplified":
	
"Total Pressure Drop Outer Stream"
	Outer.PressureDrop.Pdrop  = Outer.PressureDrop.Pd_fric;

"Total Pressure Drop Inner Stream"
	Inner.PressureDrop.Pdrop  = Inner.PressureDrop.Pd_fric;
	
"Pressure Drop Outer Stream"
	OutletOuter.P  = InletOuter.P - Outer.PressureDrop.Pdrop;

"Pressure Drop Inner Stream"
	OutletInner.P  = InletInner.P - Inner.PressureDrop.Pdrop;
	
"Outer Pipe Pressure Drop for friction"
	Outer.PressureDrop.Pd_fric = 0.01*InletOuter.P;
	
"Inner Pipe Pressure Drop for friction"
	Inner.PressureDrop.Pd_fric = 0.01*InletInner.P;

end

"Inner Pipe Film Coefficient"
	Inner.HeatTransfer.hcoeff = (Inner.HeatTransfer.Nu*Inner.Properties.Average.K/Geometry.DiInner)*Inner.HeatTransfer.Phi;

"Outer Pipe Film Coefficient"
	Outer.HeatTransfer.hcoeff= (Outer.HeatTransfer.Nu*Outer.Properties.Average.K/Outer.HeatTransfer.Dh)*Outer.HeatTransfer.Phi;

"Outer Pipe Pressure Drop due to return"
	Outer.PressureDrop.Pd_ret = 0*'kPa';

"Inner Pipe Pressure Drop due to return"
	Inner.PressureDrop.Pd_ret = 0*'kPa';

"Outer Pipe Phi correction"
	Outer.HeatTransfer.Phi = (Outer.Properties.Average.Mu/Outer.Properties.Wall.Mu)^0.14;

"Inner Pipe Phi correction"
	Inner.HeatTransfer.Phi  = (Inner.Properties.Average.Mu/Inner.Properties.Wall.Mu)^0.14;

"Outer Pipe Prandtl Number"
	Outer.HeatTransfer.PR = ((Outer.Properties.Average.Cp/Outer.Properties.Average.Mw)*Outer.Properties.Average.Mu)/Outer.Properties.Average.K;

"Inner Pipe Prandtl Number"
	Inner.HeatTransfer.PR = ((Inner.Properties.Average.Cp/Inner.Properties.Average.Mw)*Inner.Properties.Average.Mu)/Inner.Properties.Average.K;

"Outer Pipe Reynolds Number for Heat Transfer"
	Outer.HeatTransfer.Re =	(Outer.Properties.Average.rho*Outer.HeatTransfer.Vmean*Outer.HeatTransfer.Dh)/Outer.Properties.Average.Mu;

"Outer Pipe Reynolds Number for Pressure Drop"
	Outer.PressureDrop.Re =	(Outer.Properties.Average.rho*Outer.HeatTransfer.Vmean*Outer.PressureDrop.Dh)/Outer.Properties.Average.Mu;

"Inner Pipe Reynolds Number for Heat Transfer"
	Inner.HeatTransfer.Re =	(Inner.Properties.Average.rho*Inner.HeatTransfer.Vmean*Inner.HeatTransfer.Dh)/Inner.Properties.Average.Mu;

"Inner Pipe Reynolds Number for Pressure Drop"
	Inner.PressureDrop.Re =	Inner.HeatTransfer.Re;

"Outer Pipe Velocity"
	Outer.HeatTransfer.Vmean*(Outer.HeatTransfer.As*Outer.Properties.Average.rho)  = Outer.Properties.Inlet.Fw;

"Inner Pipe Velocity"
	Inner.HeatTransfer.Vmean*(Inner.HeatTransfer.As*Inner.Properties.Average.rho)  = Inner.Properties.Inlet.Fw;

"Overall Heat Transfer Coefficient Clean"
	Details.Uc*((Geometry.DoInner/(Inner.HeatTransfer.hcoeff*Geometry.DiInner) )+(Geometry.DoInner*ln(Geometry.DoInner/Geometry.DiInner)/(2*Geometry.Kwall))+(1/(Outer.HeatTransfer.hcoeff)))=1;

"Overall Heat Transfer Coefficient Dirty"
	Details.Ud*(Geometry.Rfi*(Geometry.DoInner/Geometry.DiInner) +  Geometry.Rfo + (Geometry.DoInner/(Inner.HeatTransfer.hcoeff*Geometry.DiInner) )+(Geometry.DoInner*ln(Geometry.DoInner/Geometry.DiInner)/(2*Geometry.Kwall))+(1/(Outer.HeatTransfer.hcoeff)))=1;

end

Model DoublePipe_NTU as DoublePipe_Basic

ATTRIBUTES

	Icon = "icon/DoublePipe";
	Pallete = true;
	Brief  = "Double Pipe Heat Exchanger - NTU Method";
	Info  =
"Thermal analysis of double pipe heat exchanger using the NTU Method.

== Specify ==
* The Inlet Inner stream
* The Inlet Outer stream
== Setting Parameters ==
* Flow Direction: 
** counter flow
** cocurrent flow (Default)
* Heat Transfer Correlations:
** Laminar flow 
*** Hausen (Default)
*** Schlunder
** Transition flow
*** Gnielinski (Default)
*** Hausen
** Turbulent flow
*** Petukhov (Default)
*** Sieder Tate
* Geometrical Parameters:
** DoInner 	- Outside Diameter of Inner Pipe
** DiInner	- Inside Diameter of Inner Pipe
** DiOuter	- Inside Diameter of Outer pipe
** Lpipe		- Effective Tube Length of one segment of Pipe
** Kwall		- Tube Wall Material Thermal Conductivity
* Fouling:
**Rfi	-	Inside Fouling Resistance
**Rfo	- 	Outside Fouling Resistance
";

PARAMETERS

FlowDirection 	as Switcher	(Brief="Flow Direction",Valid=["counter","cocurrent"],Default="cocurrent");
Eftestimated	as positive  (Brief="Effectiveness estimate",Default=0.5);	

VARIABLES

Method as NTU_Basic	(Brief="NTU Method of Calculation", Symbol=" ");

EQUATIONS

"Effectiveness Correction"
	Method.Eft1 = 1;

switch CalculationApproach
	
	case "Full":
	
"Number of Units Transference"
	Method.NTU*Method.Cmin = Details.Ud*Geometry.Pi*Geometry.DoInner*Geometry.Lpipe;
	
"Minimum Heat Capacity"
	Method.Cmin  = min([Method.Ch,Method.Cc]);

"Maximum Heat Capacity"
	Method.Cmax  = max([Method.Ch,Method.Cc]);

"Thermal Capacity Ratio"
	Method.Cr    = Method.Cmin/Method.Cmax;

if Method.Cr equal 0 
	
	then 	
"Effectiveness"
	Method.Eft = 1-exp(-Method.NTU);
	
	else

switch  FlowDirection

	case "cocurrent":
	
"Effectiveness in Cocurrent Flow"
	Method.Eft = (1-exp(-Method.NTU*(1+Method.Cr)))/(1+Method.Cr);

	case "counter":

if Method.Cr equal 1
	
	then
	
"Effectiveness in Counter Flow"
	Method.Eft = Method.NTU/(1+Method.NTU);
	
	else
	
"Effectiveness in Counter Flow"
	Method.Eft = (1-exp(-Method.NTU*(1-Method.Cr)))/(1-Method.Cr*exp(-Method.NTU*(1-Method.Cr)));
	
end

end

end

	case "Simplified":

"Number of Units Transference"
	Method.NTU = 1;
	
"Minimum Heat Capacity"
	Method.Cmin  = min([Method.Ch,Method.Cc]);

"Maximum Heat Capacity"
	Method.Cmax  = max([Method.Ch,Method.Cc]);

"Thermal Capacity Ratio"
	Method.Cr    = 1;
	
"Effectiveness"
	Method.Eft = Eftestimated;
	
end

switch HotSide
	
	case "outer":

switch CalculationApproach
	
	case "Full":
	
"Duty"
	Details.Q	= Method.Eft*Method.Cmin*(InletOuter.T-InletInner.T);

	case "Simplified":
	
"Duty"
	Details.Q	= Qestimated;

end

"Hot Stream Heat Capacity"
	Method.Ch  = InletOuter.F*Outer.Properties.Average.Cp;
	
"Cold Stream Heat Capacity"
	Method.Cc = InletInner.F*Inner.Properties.Average.Cp;

	when InletInner.T > InletOuter.T switchto "inner";
	
	case "inner":

switch CalculationApproach
	
	case "Full":
	
"Duty"
	Details.Q	= Method.Eft*Method.Cmin*(InletInner.T-InletOuter.T);

	case "Simplified":

"Duty"
	Details.Q	= Qestimated;

end

"Cold Stream Heat Capacity"
	Method.Cc = InletOuter.F*Outer.Properties.Average.Cp;
	
"Hot Stream Heat Capacity"
	Method.Ch = InletInner.F*Inner.Properties.Average.Cp;
	
	when InletInner.T < InletOuter.T switchto "outer";
	
end

end

Model DoublePipe_LMTD as DoublePipe_Basic
	
ATTRIBUTES

	Icon = "icon/DoublePipe";
	Pallete = true;
	Brief  = "Double Pipe Heat Exchanger - LMTD Method";
	Info  =
"Thermal analysis of double pipe heat exchanger using the LMTD Method.

== Specify ==
* The Inlet Inner stream
* The Inlet Outer stream
== Setting Parameters ==
* Flow Direction: 
** counter flow
** cocurrent flow (Default)
* Heat Transfer Correlations:
** Laminar flow 
*** Hausen (Default)
*** Schlunder
** Transition flow
*** Gnielinski (Default)
*** Hausen
** Turbulent flow
*** Petukhov (Default)
*** Sieder Tate
* Geometrical Parameters:
** DoInner 	- Outside Diameter of Inner Pipe
** DiInner	- Inside Diameter of Inner Pipe
** DiOuter	- Inside Diameter of Outer pipe
** Lpipe		- Effective Tube Length of one segment of Pipe
** Kwall		- Tube Wall Material Thermal Conductivity
* Fouling:
**Rfi	-	Inside Fouling Resistance
**Rfo	- 	Outside Fouling Resistance
";

PARAMETERS

FlowDirection 	as Switcher	(Brief="Flow Direction",Valid=["counter","cocurrent"],Default="cocurrent");
	
VARIABLES

Method as LMTD_Basic	(Brief="LMTD Method of Calculation", Symbol=" ");

EQUATIONS

switch CalculationApproach
	
	case "Full":
	
"Duty"
	Details.Q = Details.Ud*Geometry.Pi*Geometry.DoInner*Geometry.Lpipe*Method.LMTD;
	
	case "Simplified":
	
"Duty"
	Details.Q = Qestimated;

end

"LMTD Correction Factor - True counter ou cocurrent flow"
	Method.Fc = 1;

switch HotSide
	
	case "outer":
	
switch FlowDirection

	case "cocurrent":
	
"Temperature Difference at Inlet - Cocurrent Flow"
	Method.DT0 = InletOuter.T - InletInner.T;

"Temperature Difference at Outlet - Cocurrent Flow"
	Method.DTL = OutletOuter.T - OutletInner.T;

	case "counter":
	
"Temperature Difference at Inlet - Counter Flow"
	Method.DT0 = InletOuter.T - OutletInner.T;

"Temperature Difference at Outlet - Counter Flow"
	Method.DTL = OutletOuter.T - InletInner.T;
	

end

	when InletInner.T > InletOuter.T switchto "inner";
	
	case "inner":

switch FlowDirection

	case "cocurrent":
	
"Temperature Difference at Inlet - Cocurrent Flow"
	Method.DT0 = InletInner.T - InletOuter.T;

"Temperature Difference at Outlet - Cocurrent Flow"
	Method.DTL = OutletInner.T - OutletOuter.T;
	
	case "counter":
	
"Temperature Difference at Inlet - Counter Flow"
	Method.DT0 = InletInner.T - OutletOuter.T;

"Temperature Difference at Outlet - Counter Flow"
	Method.DTL = OutletInner.T - InletOuter.T;
	
end

	when InletInner.T < InletOuter.T switchto "outer";

end

end
